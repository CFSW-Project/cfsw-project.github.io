Yes, you can adapt the Flexbox-based CSS examples to use CSS Grid instead. Here’s how you can modify your code to utilize Grid Layout instead of Flexbox:

1. **Basic Grid Container Setup:**

   ```css
   .container {
     display: grid;
     grid-template-columns: repeat(auto-fit, minmax(100px, 1fr)); /* Example for responsive columns */
   }
   ```

2. **Align Items Along the Main Axis:**

   Grid layout doesn’t use `justify-content` in the same way as Flexbox, but you can achieve similar results:

   ```css
   .container {
     display: grid;
     justify-content: center; /* Aligns the grid items horizontally within the container */
   }
   ```

3. **Grid Direction (Equivalent to `flex-direction`):**

   Grid doesn’t have a `direction` property. Instead, you define the layout using `grid-template-rows` and `grid-template-columns`:

   ```css
   .container {
     display: grid;
     grid-template-columns: repeat(3, 1fr); /* Defines a grid with 3 columns */
   }
   ```

4. **Grid Wrap (Equivalent to `flex-wrap`):**

   Grid doesn’t have a `flex-wrap` property, but you can use `grid-auto-flow`:

   ```css
   .container {
     display: grid;
     grid-auto-flow: row; /* Controls how grid items are placed into the grid */
   }
   ```

5. **Grid and Nested Grid Containers:**

   Similar to Flexbox, you can use nested grids:

   ```css
   .outer-container {
     display: grid;
     grid-template-columns: 1fr 1fr; /* Example of a 2-column grid */
   }
   .inner-container {
     display: grid;
     grid-template-rows: repeat(3, 1fr); /* Example of a 3-row grid */
   }
   ```

6. **Aligning Content in a Multi-line Grid Container:**

   Use `align-content` and `justify-content` for alignment:

   ```css
   .container {
     display: grid;
     grid-auto-flow: row;
     align-content: space-between; /* Aligns the grid items vertically within the container */
   }
   ```

7. **Using Grid in Media Queries:**

   You can use media queries to adjust the grid layout:

   ```css
   @media (max-width: 600px) {
     .container {
       grid-template-columns: 1fr; /* Stacks items in a single column on small screens */
     }
   }
   ```

8. **Different Alignments:**

   Combine `justify-content` and `align-items` to control alignment:

   ```css
   .container {
     display: grid;
     justify-content: space-between; /* Aligns the grid items horizontally within the container */
     align-items: center; /* Aligns the grid items vertically within the container */
   }
   ```

Incorporating these changes into your HTML, you’d replace `flex` with `grid` in the `display` property of your CSS classes. Each grid property has its unique way of managing layout compared to Flexbox, but it offers powerful capabilities for creating complex layouts.